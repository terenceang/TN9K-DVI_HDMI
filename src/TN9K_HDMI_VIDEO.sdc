# Copyright (C)2014-2025 Gowin Semiconductor Corporation.
# All rights reserved.
# File Title: Timing Constraints file for Tang Nano 9K HDMI Encoder (Video + Audio)
# Part Number: GW1NR-LV9QN88C6/I5
# Device: GW1NR-9C
# Project: Tang Nano 9K HDMI Video + Audio
# Updated: 2025-10-13

# ===== PRIMARY CLOCKS =====
# Define primary clock - 27 MHz crystal input
# Period = 1/27MHz = 37.037 ns
create_clock -name clk_crystal -period 37.037 -waveform {0 18.518} [get_ports {clk_27m}]

# ===== GENERATED CLOCKS =====
# Gowin automatically infers clocks from rPLL and CLKDIV primitives.
# Manual generated clock definitions are not needed and can cause constraint errors
# if hierarchical paths don't match the synthesized netlist.
#
# Auto-inferred clocks from design:
#   - 126 MHz serial clock: 27 MHz × (FBDIV+1)/(IDIV+1) = 27 × 14/3 = 126 MHz
#   - 25.2 MHz pixel clock: 126 MHz ÷ 5 = 25.2 MHz
#
# The Gowin timing analyzer will automatically propagate these clocks through
# the design and analyze setup/hold timing on all synchronous paths.

# ===== ASYNCHRONOUS INPUTS =====
# Set a false path for the asynchronous reset button input.
# This is safe because the signal is passed through a synchronizer
# (rst_sync_n) before being used in any synchronous domain.
set_false_path -from [get_ports {rst_n}]

# ===== HDMI OUTPUT CONSTRAINTS =====
# The TMDS outputs are generated by OSER10 primitives (10:1 serializers) driven
# by both the pixel clock (PCLK) and serial clock (FCLK). The serializers handle
# internal timing and bit alignment.
#
# HDMI uses source-synchronous signaling where the clock is transmitted alongside
# the data. The receiving device uses the forwarded clock to sample the data, so
# board-level setup/hold timing is not constrained by the FPGA's clock.
#
# Setting false paths allows the Gowin tools to optimize internal logic without
# being constrained by output timing that is actually determined by the TMDS
# protocol and receiving device.
set_false_path -to [get_ports {tmds_data_p[*]}]
set_false_path -to [get_ports {tmds_data_n[*]}]
set_false_path -to [get_ports {tmds_clk_p}]
set_false_path -to [get_ports {tmds_clk_n}]

# ===== AUDIO PATH CONSTRAINTS =====
# Audio clock enable (audio_ce) is derived from the pixel clock through division.
# The audio_ce_gen module uses a counter to generate a 48 kHz enable pulse.
# The external audio toggle signal (if used) crosses clock domains and is
# synchronized with a 2-stage synchronizer.
#
# Mark CDC synchronizer paths as false paths (by design):
# set_false_path -from [get_pins {audio_ce_generator/ext_toggle_sync1/Q}]
# set_false_path -from [get_pins {audio_ce_generator/ext_toggle_sync2/Q}]
#
# Note: The above paths may not exist in the netlist if synthesis optimizes them
# away when ext_audio_toggle is tied to '0'. The Gowin tools will ignore these
# constraints if the paths don't exist.

# Audio debug outputs don't need tight timing (for observation only)
# set_false_path -from [get_pins {hdmi_encoder_inst/dbg_audio_tx_cnt_reg[*]/Q}]
# set_false_path -from [get_pins {hdmi_encoder_inst/dbg_island_active_reg/Q}]
# set_false_path -from [get_pins {hdmi_encoder_inst/dbg_packet_type_reg[*]/Q}]
#
# Note: Debug signals are internal and don't drive output ports in current design.
# These constraints are commented out but documented for reference.

# ===== CLOCK DOMAIN RELATIONSHIPS =====
# The pixel clock (25.2 MHz) and serial clock (126 MHz) are synchronous - both
# derived from the same rPLL with a 5:1 frequency relationship. Timing paths
# between these domains are automatically analyzed by the Gowin timing engine.